{
  "name": "codebraid-preview",
  "displayName": "Codebraid Preview",
  "description": "Preview Markdown documents with Pandoc.  Optionally execute code blocks and inline code with Codebraid, using Jupyter kernels or its built-in code execution system.",
  "version": "0.16.0-dev1",
  "publisher": "gpoore",
  "homepage": "https://github.com/gpoore/codebraid-preview-vscode",
  "license": "See license in LICENSE.txt (BSD 3-Clause except as noted otherwise)",
  "repository": {
    "type": "git",
    "url": "https://github.com/gpoore/codebraid-preview-vscode.git"
  },
  "engines": {
    "vscode": "^1.63.0"
  },
  "categories": [
    "Other"
  ],
  "activationEvents": [
    "onLanguage:latex",
    "onLanguage:markdown",
    "onLanguage:org",
    "onLanguage:restructuredtext",
    "onLanguage:textile"
  ],
  "main": "./dist/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "codebraidPreview.startPreview",
        "title": "Open Codebraid Preview",
        "category": "Codebraid preview"
      },
      {
        "command": "codebraidPreview.runCodebraid",
        "title": "Run code with Codebraid",
        "category": "Codebraid preview"
      },
      {
        "command": "codebraidPreview.exportDocument",
        "title": "Export document with Pandoc",
        "category": "Codebraid preview"
      }
    ],
    "configuration": {
      "title": "Codebraid Preview",
      "properties": {
        "codebraid.preview.maxPreviews": {
          "type": "number",
          "default": 5,
          "description": "Maximum number of preview panels allowed concurrently."
        },
        "codebraid.preview.minBuildInterval": {
          "type": "number",
          "default": 1000,
          "description": "Minimum interval between document builds in milliseconds."
        },
        "codebraid.preview.scrollPreviewWithEditor": {
          "type": "boolean",
          "default": true,
          "description": "Scroll preview to sync with editor"
        },
        "codebraid.preview.scrollEditorWithPreview": {
          "type": "boolean",
          "default": true,
          "description": "Scroll editor to sync with preview"
        },
        "codebraid.preview.css.useMarkdownPreviewFontSettings": {
          "type": "boolean",
          "default": true,
          "description": "Inherit font settings (font family, font size, line height) from the built-in Markdown preview (settings under \"markdown.preview\"), to maintain a similar appearance."
        },
        "codebraid.preview.css.useDefault": {
          "type": "boolean",
          "default": true,
          "description": "Whether the preview's default CSS is used"
        },
        "codebraid.preview.css.overrideDefault": {
          "type": "boolean",
          "default": true,
          "description": "Whether document CSS overrides the preview's default CSS (determines which is loaded last)"
        },
        "codebraid.preview.pandoc.build": {
          "type": "object",
          "patternProperties": {
            "^\\*(?:\\.[0-9a-z_]+(?:[+-][0-9a-z_]+)*)?\\.[0-9a-z_]+$": {
              "type": "object",
              "required": ["reader"],
              "properties": {
                "reader": {
                  "type": "string",
                  "pattern": "^(?:[0-9a-z_]+|(?:(?<![\\\\^`])\"[^\"\r\n]+(?<![\\\\^`])\"(?!\")|(?<![\\\\^`])'[^'\r\n]+(?<![\\\\^`])'(?!')|[^ \t\"'\r\n;&|]+(?=[\"'.+-]|$))*?(?:\\.lua|(?<![\\\\^`])\"[^\"\r\n]+?\\.lua(?:[+-][0-9a-z_]+)*\"|(?<![\\\\^`])'[^'\r\n]+?\\.lua(?:[+-][0-9a-z_]+)*'))(?:[+-][0-9a-z_]+)*$",
                  "description": "Pandoc reader (input format), including any extensions.  For example, `markdown+smart` or `custom_reader.lua-default_feature`.  This is used within a shell in running pandoc, so spaces must be quoted and other quoting/escaping may be necessary."
                },
                "preview": {
                  "type": "object",
                  "patternProperties": {
                    "^[0-9a-z_]+(?:[+-][0-9a-z_]+)*|.+$": {
                      "type": "object",
                      "properties": {
                        "writer": {
                          "type": "string",
                          "pattern": "^(?:[0-9a-z_]+|(?:(?<![\\\\^`])\"[^\"\r\n]+(?<![\\\\^`])\"(?!\")|(?<![\\\\^`])'[^'\r\n]+(?<![\\\\^`])'(?!')|[^ \t\"'\r\n;&|]+(?=[\"'.+-]|$))*?(?:\\.lua|(?<![\\\\^`])\"[^\"\r\n]+?\\.lua(?:[+-][0-9a-z_]+)*\"|(?<![\\\\^`])'[^'\r\n]+?\\.lua(?:[+-][0-9a-z_]+)*'))(?:[+-][0-9a-z_]+)*$",
                          "description": "Pandoc writer (output format), including any extensions.  For example, `markdown+smart` or `custom_reader.lua-default_feature`.  This is used within a shell in running pandoc, so spaces must be quoted and other quoting/escaping may be necessary."
                        },
                        "defaults": {
                          "type": "object",
                          "patternProperties": {
                            "^(?!(?:from|reader|to|writer|input-file|input-files|output-file)$)[a-z]+(?:-[a-z]+)*$": {}
                          },
                          "default": {},
                          "description": "Pandoc defaults.  This is converted into build-specific defaults files.  See Pandoc documentation for valid keys and values."
                        },
                        "options": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "pattern": "^(?!(?:-f|--from|-r|--read|-t|--to|-w|--write|-o|--output)(?:[ =]|$))(?:-[a-zA-Z]|--[a-z]+(?:-[a-z]+)*)(?:[ =](?:(?<![\\\\^`])\"[^\"]+(?<![\\\\^`])\"(?!\")|(?<![\\\\^`])'[^']+(?<![\\\\^`])'(?!')|[^ \t\"';&|]+(?=[\"']|$))+)?$"
                          },
                          "default": [],
                          "description": "Pandoc command-line options.  An array with one option per element.  For example, `[\"--filter FILTER\"]`.  Options are evaluated within a shell, so spaces must be quoted and other quoting/escaping may be necessary."
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "default": {"html": {"defaults": {}, "options": []}},
                  "additionalProperties": false,
                  "description": "Build configuration for preview."
                },
                "export": {
                  "type": "object",
                  "patternProperties": {
                    "^[0-9a-z_]+(?:[+-][0-9a-z_]+)*|.+$": {
                      "type": "object",
                      "properties": {
                        "writer": {
                          "type": "string",
                          "pattern": "^(?:[0-9a-z_]+|(?:(?<![\\\\^`])\"[^\"\r\n]+(?<![\\\\^`])\"(?!\")|(?<![\\\\^`])'[^'\r\n]+(?<![\\\\^`])'(?!')|[^ \t\"'\r\n;&|]+(?=[\"'.+-]|$))*?(?:\\.lua|(?<![\\\\^`])\"[^\"\r\n]+?\\.lua(?:[+-][0-9a-z_]+)*\"|(?<![\\\\^`])'[^'\r\n]+?\\.lua(?:[+-][0-9a-z_]+)*'))(?:[+-][0-9a-z_]+)*$",
                          "description": "Pandoc writer (output format), including any extensions.  For example, `markdown+smart` or `custom_reader.lua-default_feature`.  This is used within a shell in running pandoc, so spaces must be quoted and other quoting/escaping may be necessary."
                        },
                        "defaults": {
                          "type": "object",
                          "patternProperties": {
                            "^(?!(?:from|reader|to|writer|input-file|input-files|output-file)$)[a-z]+(?:-[a-z]+)*$": {}
                          },
                          "default": {},
                          "description": "Pandoc defaults.  This is converted into build-specific defaults files.  See Pandoc documentation for valid keys and values."
                        },
                        "options": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "pattern": "^(?!(?:-f|--from|-r|--read|-t|--to|-w|--write|-o|--output)(?:[ =]|$))(?:-[a-zA-Z]|--[a-z]+(?:-[a-z]+)*)(?:[ =](?:(?<![\\\\^`])\"[^\"]+(?<![\\\\^`])\"(?!\")|(?<![\\\\^`])'[^']+(?<![\\\\^`])'(?!')|[^ \t\"';&|]+(?=[\"']|$))+)?$"
                          },
                          "default": [],
                          "description": "Pandoc command-line options.  An array with one option per element.  For example, `[\"--filter FILTER\"]`.  Options are evaluated within a shell, so spaces must be quoted and other quoting/escaping may be necessary."
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "default": {"html": {"defaults": {}, "options": []}},
                  "additionalProperties": false,
                  "description": "Build configuration for export."
                }
              }
            }
          },
          "default": {
            "*.cbmd": {
              "reader": "commonmark_x",
              "preview": {"html": {"defaults": {}, "options": []}},
              "export": {}
            },
            "*.markdown": {
              "reader": "commonmark_x",
              "preview": {"html": {"defaults": {}, "options": []}},
              "export": {}
            },
            "*.md": {
              "reader": "commonmark_x",
              "preview": {"html": {"defaults": {}, "options": []}},
              "export": {}
            },
            "*.org": {
              "reader": "org",
              "preview": {"html": {"defaults": {}, "options": []}},
              "export": {}
            },
            "*.rst": {
              "reader": "rst",
              "preview": {"html": {"defaults": {}, "options": []}},
              "export": {}
            },
            "*.tex": {
              "reader": "latex",
              "preview": {"html": {"defaults": {}, "options": []}},
              "export": {}
            },
            "*.textile": {
              "reader": "textile",
              "preview": {"html": {"defaults": {}, "options": []}},
              "export": {}
            }
          },
          "description": "Mapping from file extensions to Pandoc build configuration for preview/export.  For example, `{\"*.md\": {\"reader\": \"markdown\", \"preview\": {\"html\": {\"defaults\": {\"highlight-style\": \"kate\"}, \"options\": [\"--toc\"]}}, \"defaults\":{}}}`.  Pandoc readers (input formats) and preview/export formats can include extensions (for example, `markdown+smart` or `custom_reader.lua-default_feature`).  The \"defaults\" fields are converted into build-specific defaults files; these are defaults, so they will be overwritten by other settings.  The \"options\" fields are command-line options, so they typically are not overwritten or modified by other settings.",
          "markdownDescription": "Mapping from file extensions to Pandoc build configuration for preview/export.  For example, `{\"*.md\": {\"reader\": \"markdown\", \"preview\": {\"html\": {\"defaults\": {\"highlight-style\": \"kate\"}, \"options\": [\"--toc\"]}}, \"defaults\":{}}}`.  Pandoc readers (input formats) and preview/export formats can include extensions (for example, `markdown+smart` or `custom_reader.lua-default_feature`).  The \"defaults\" fields are converted into build-specific defaults files; these are defaults, so they will be overwritten by other settings.  The \"options\" fields are command-line options, so they typically are not overwritten or modified by other settings."
        },
        "codebraid.preview.pandoc.extraEnv": {
          "type": "object",
          "patternProperties": {
            "^[a-zA-Z][a-zA-Z0-9_]*$": {
              "type": "string"
            }
          },
          "default": {},
          "additionalProperties": false,
          "description": "Additional environment variables that are set for the Pandoc subprocess used to generate the preview and to export documents."
        },
        "codebraid.preview.pandoc.executable": {
          "type": "string",
          "default": "pandoc",
          "description": "Pandoc executable.  This is used within a shell, so it must be appropriately quoted and escaped.",
          "pattern": "(?:(?<![\\\\^`])\"[^\"]+(?<![\\\\^`])\"(?!\")|(?<![\\\\^`])'[^']+(?<![\\\\^`])'(?!')|[^ \t\"';&|]+(?=[\"']|$))+",
          "patternErrorMessage": "This is used within a shell, so it must be appropriately quoted and escaped."
        },
        "codebraid.preview.pandoc.fromFormat": {
          "type": "string",
          "default": "commonmark_x",
          "description": "Pandoc source format (`--from=FORMAT`).  Currently, only \"commonmark_x\" supports scroll sync.",
          "deprecationMessage": "Deprecated:  Use codebraid.preview.pandoc.build instead, with file extension *.md.",
          "markdownDeprecationMessage": "**Deprecated**:  Use `codebraid.preview.pandoc.build` instead, with file extension `*.md`."
        },
        "codebraid.preview.pandoc.options": {
          "type": "array",
          "items": {
            "type": "string",
            "description": "Pandoc option in `--option`, `--option=VALUE`, or `--option VALUE` form.  Options are evaluated within a shell, so spaces must be quoted.",
            "pattern": "^(?!-f|--from|-r|--read)(?:-[a-zA-Z]|--[a-zA-Z]+(?:-[a-zA-Z]+)*)(?:[ =](?:\"[^\"]+\"(?!\")|'[^']+'|[^ \"';&|]+(?=[\"']|$))+)?$",
            "patternErrorMessage": "One option (including any value) per line/array element.  Options are evaluated within a shell, so spaces must be quoted.  Specify source format in \"pandocFromFormat\"."
          },
          "default": [],
          "description": "Pandoc command-line options.  In the settings GUI, one option per line (for example, `--filter FILTER`).  In `settings.json`, an array with one option per element (for example, `[\"--filter FILTER\"]`).  Options are evaluated within a shell, so spaces must be quoted.",
          "deprecationMessage": "Deprecated:  Use codebraid.preview.pandoc.build instead, with file extension *.md.",
          "markdownDeprecationMessage": "**Deprecated**:  Use `codebraid.preview.pandoc.build` instead, with file extension `*.md`."
        },
        "codebraid.preview.pandoc.defaultsFile": {
          "type": "string",
          "default": "_codebraid_preview.yaml",
          "pattern": "^[^\\\\/]+$",
          "patternErrorMessage": "Must be a file name without a path (basename).  Must be a file in the document directory.",
          "description": "Special Pandoc defaults file in the document directory.  If it exists, it is automatically used in creating the preview and in exporting documents.  If it defines \"input-files\", the preview will automatically work with all files in a multi-file document."
        },
        "codebraid.preview.pandoc.previewDefaultsFile": {
          "type": "string",
          "default": "_codebraid_preview.yaml",
          "pattern": "^[^\\\\/]+$",
          "patternErrorMessage": "Must be a file name without a path to the file.",
          "description": "Special Pandoc defaults file in document directory.  If it exists and defines \"input-files\", the preview will automatically work with all files in a multi-file document.",
          "deprecationMessage": "Deprecated:  Use codebraid.preview.pandoc.defaultsFile instead.",
          "markdownDeprecationMessage": "**Deprecated**:  Use `codebraid.preview.pandoc.defaultsFile` instead."
        },
        "codebraid.preview.pandoc.showRaw": {
          "type": "boolean",
          "default": true,
          "description": "Display a verbatim representation of non-HTML raw content `{=format}` in the preview."
        },
        "codebraid.preview.pandoc.showStderr": {
          "type": "string",
          "enum": ["never", "warning", "always"],
          "default": "always",
          "description": "Display a notification in the preview when Pandoc completes without errors but its stderr is non-empty (there are always notifications for errors).  \"never\": no display.  \"warning\": display only when stderr contains the word \"warning\" (case insensitive).  \"always\": always display regardless of content."
        },
        "codebraid.preview.security.allowInlineScripts": {
          "type": "boolean",
          "default": false,
          "description": "Allow the preview to use inline scripts <script>...</script>.  (Scripts bundled as part of the extension are always allowed.)"
        },
        "codebraid.preview.security.allowEmbeddedFonts": {
          "type": "boolean",
          "default": true,
          "description": "Allow the preview to load fonts from `data:` URLs.  This is helpful when using `--embed-resources` (or deprecated `--self-contained`) to embed resources in the preview document rather than loading them from local or remote locations."
        },
        "codebraid.preview.security.allowEmbeddedImages": {
          "type": "boolean",
          "default": true,
          "description": "Allow the preview to load images from `data:` URLs.  This is helpful when using `--embed-resources` (or deprecated `--self-contained`) to embed resources in the preview document rather than loading them from local or remote locations."
        },
        "codebraid.preview.security.allowEmbeddedMedia": {
          "type": "boolean",
          "default": true,
          "description": "Allow the preview to load media from `data:` URLs.  This is helpful when using `--embed-resources` (or deprecated `--self-contained`) to embed resources in the preview document rather than loading them from local or remote locations."
        },
        "codebraid.preview.security.allowEmbeddedScripts": {
          "type": "boolean",
          "default": false,
          "description": "Allow the preview to load scripts from `data:` URLs.  This is helpful when using `--embed-resources` (or deprecated `--self-contained`) to embed resources in the preview document rather than loading them from local or remote locations."
        },
        "codebraid.preview.security.allowEmbeddedStyles": {
          "type": "boolean",
          "default": true,
          "description": "Allow the preview to load styles from `data:` URLs.  This is helpful when using `--embed-resources` (or deprecated `--self-contained`) to embed resources in the preview document rather than loading them from local or remote locations."
        },
        "codebraid.preview.security.allowLocalFonts": {
          "type": "boolean",
          "default": true,
          "description": "Allow the preview to load fonts from the current workspace folder, the document directory, the default Pandoc user data directory (if enabled via security.pandocDefaultDataDirIsResourceRoot), and any other locations specified in security.extraLocalResourceRoots.  (Fonts bundled as part of the extension are always allowed.)"
        },
        "codebraid.preview.security.allowLocalImages": {
          "type": "boolean",
          "default": true,
          "description": "Allow the preview to load images from the current workspace folder, the document directory, the default Pandoc user data directory (if enabled via security.pandocDefaultDataDirIsResourceRoot), and any other locations specified in security.extraLocalResourceRoots."
        },
        "codebraid.preview.security.allowLocalMedia": {
          "type": "boolean",
          "default": true,
          "description": "Allow the preview to load media from the current workspace folder, the document directory, the default Pandoc user data directory (if enabled via security.pandocDefaultDataDirIsResourceRoot), and any other locations specified in security.extraLocalResourceRoots."
        },
        "codebraid.preview.security.allowLocalScripts": {
          "type": "boolean",
          "default": false,
          "description": "Allow the preview to load scripts from the current workspace folder, the document directory, the default Pandoc user data directory (if enabled via security.pandocDefaultDataDirIsResourceRoot), and any other locations specified in security.extraLocalResourceRoots.  (Scripts bundled as part of the extension are always allowed.)"
        },
        "codebraid.preview.security.allowLocalStyles": {
          "type": "boolean",
          "default": true,
          "description": "Allow the preview to load styles from the current workspace folder, the document directory, the default Pandoc user data directory (if enabled via security.pandocDefaultDataDirIsResourceRoot), and any other locations specified in security.extraLocalResourceRoots.  (Styles bundled as part of the extension are always allowed.)"
        },
        "codebraid.preview.security.allowRemoteFonts": {
          "type": "boolean",
          "default": false,
          "description": "Allow the preview to load fonts from remote locations via https."
        },
        "codebraid.preview.security.allowRemoteImages": {
          "type": "boolean",
          "default": false,
          "description": "Allow the preview to load images from remote locations via https."
        },
        "codebraid.preview.security.allowRemoteMedia": {
          "type": "boolean",
          "default": false,
          "description": "Allow the preview to load media from remote locations via https."
        },
        "codebraid.preview.security.allowRemoteScripts": {
          "type": "boolean",
          "default": false,
          "description": "Allow the preview to load scripts from remote locations via https."
        },
        "codebraid.preview.security.allowRemoteStyles": {
          "type": "boolean",
          "default": false,
          "description": "Allow the preview to load styles from remote locations via https."
        },
        "codebraid.preview.security.extraLocalResourceRoots": {
          "type": "array",
          "items": {
            "type": "string",
            "description": "Absolute or relative path.  In absolute paths, a leading ~/ is expanded to the user's home directory.  Relative paths are relative to the document file; for example, ../images refers to an images directory one level up from the document.",
            "pattern": "~[/\\\\].*|[^~].*",
            "patternErrorMessage": "A leading ~ is only allowed when followed by a path separator."
          },
          "default": [],
          "description": "Additional root paths from which the preview can load local (filesystem) resources, such as images and CSS.  These are in addition to the current workspace folders and the document directory."
        },
        "codebraid.preview.security.pandocDefaultDataDirIsResourceRoot": {
          "type": "boolean",
          "default": true,
          "description": "Add the default Pandoc user data directory to the root paths from which the preview can load local (filesystem) resources, such as images and CSS."
        }
      }
    }
  },
  "dependencies": {
    "@types/js-yaml": "^4.0.5",
    "@vscode/codicons": "^0.0.32",
    "js-yaml": "^4.1.0",
    "katex": "^0.16.6"
  },
  "scripts": {
    "vscode:prepublish": "npm run package",
    "compile": "webpack",
    "watch": "webpack --watch",
    "package": "webpack --mode production --devtool hidden-source-map",
    "compile-tests": "tsc -p . --outDir out",
    "watch-tests": "tsc -p . -w --outDir out",
    "pretest": "npm run compile-tests && npm run compile && npm run lint",
    "lint": "eslint src --ext ts",
    "test": "node ./out/test/runTest.js"
  },
  "devDependencies": {
    "@types/glob": "^7.1.4",
    "@types/mocha": "^9.0.0",
    "@types/node": "18.x",
    "@types/vscode": "^1.63.0",
    "@typescript-eslint/eslint-plugin": "^5.1.0",
    "@typescript-eslint/parser": "^5.1.0",
    "@vscode/test-electron": "^2.1.4",
    "eslint": "^8.1.0",
    "glob": "^8.0.3",
    "mocha": "^10.0.0",
    "ts-loader": "^9.2.5",
    "typescript": "^4.4.4",
    "webpack": "^5.52.1",
    "webpack-cli": "^4.8.0"
  }
}
